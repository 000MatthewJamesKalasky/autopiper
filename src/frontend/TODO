- Bypass values
  - prepare, provide, unprovide, ask, askvalue (with index match)
- onkillyounger and support in the backend
  - codegen'd once per killyounger, inserted into the BB immediately after the
    killyounger.
  - special flag set on port writes and reg writes that exempt them from
    same-stage and disjoint-predicates checks.
- port default value that's set if no write occurs. (If no default, the port
  output value is unspecified if no write occurs for a given invocation.)

OoO-decomposed-as-macros:
- transactional state macros (or primitives?)
- queue! macro
- superscalar primitive? (alters the pipelining transform)
  - this needs to interact with the transactional-state primitives, produces a
    "channel mask" that indicates when lower ways are invalidated by
    dependences on upper ways, and wraps the pipe in a restart-loop to restart
    partway through superscalar groups.
  - Can we do this with a tweak to ask/provide? Superscalar bypass in a single
    cycle is like bypass over time in a scalar pipe; so bypass in a 4-way
    machine is like saying "next 3 ops can't bypass this value". Can 'ask' be
    tweaked to have a 'not available yet' status? This also allows for natural
    stall insertion in other cases if we have separate 'generate' and 'provide'
    ops -- 'generate' starts its scope (to close the danger window and force
    stalls on dependents) and 'provide' actually yields the value to
    dependents.
  - 'way' and 'ways' keywords that evaluate to whichever way we're in.
  - backedges with configurable behavior: either stall all ways or (maybe)
    first way stalls, other ways just kill so that restart gets them.
- rename! macro
- scoreboard-scheduler component or macro
  (a standard OoO backend is scoreboard scheduling composed with renaming)

Far-off goals:
- proper lexical scope and non-hacky function inlining
- rework the AST as either protobufs or (maybe) something more
  custom/lighter-weight with explicit visitor support
- rewrite the whole thing now that I understand the problem space better
  (leading candidate: Haskell DSL -- the Autopiper monad)
