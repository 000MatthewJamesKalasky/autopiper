- support for registers (single-element storage)
- support for aggregates and type lowering pass
  - add a casting operation to allow for conversion to/from simply-typed values
  - add syntax for arbitrary-bitwidth simple values
- end-to-end tests and harness (with specified test-vector inputs and expected
  outputs on stimulus/output ports)
- support for "macros" in C++ (as codegen visitor pass hooks)
- ask/provide abstraction for bypass (in backend and frontend)
- transactional state macros (or primitives?)
- proper lexical scope and non-hacky function inlining
- conditional/blocking port hooks

OoO-decomposed-as-macros:
- queue! macro
- superscalar primitive? (alters the pipelining transform)
  - this needs to interact with the transactional-state primitives, produces a
    "channel mask" that indicates when lower ways are invalidated by
    dependences on upper ways, and wraps the pipe in a restart-loop to restart
    partway through superscalar groups.
  - Can we do this with a tweak to ask/provide? Superscalar bypass in a single
    cycle is like bypass over time in a scalar pipe; so bypass in a 4-way
    machine is like saying "next 3 ops can't bypass this value". Can 'ask' be
    tweaked to have a 'not available yet' status? This also allows for natural
    stall insertion in other cases if we have separate 'generate' and 'provide'
    ops -- 'generate' starts its scope (to close the danger window and force
    stalls on dependents) and 'provide' actually yields the value to
    dependents.
- rename! macro
- scoreboard-scheduler component or macro
  (a standard OoO backend is scoreboard scheduling composed with renaming)

Far-off goals:
- support for macros in some other language (Lua? Figure out a way to wrap the
  codegen API and the AST-with-pass-annotations nicely)
- rework the AST as either protobufs or (maybe) something more
  custom/lighter-weight with explicit visitor support
- rewrite the whole thing now that I understand the problem space better
