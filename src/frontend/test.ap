type AggType {
    x : int32;
    y : int32;
}

func plus1(a: int32) : int32 {
    return a + 1;
}

func my_func(a: int32, b: int32) : bool {
    if (a + b == 3) return 1;

    while (a > 0) {
        a = a - 1;
    }
    return (a == b);
}

func complex_lhs() : void {
    let x : int32[32] = [];
    let y : AggType[32] = [];

    x[0] = 1;
    y[x[0]].x = y[x[1]].y;
}

func entry main() : void {
    let global_in : port int32 = port "global_in";
    let global_out : port int32 = port "global_out";
    let anon_port : port int32 = port;

    let val1 = my_func(read global_in, read global_in);
    let int32_val = read global_in;
    let val2 = my_func(int32_val, plus1(int32_val));

    let x = read global_in;
    let y = x;
    let z : AggType = [ x = 0, y = 0 ];
    while (y > 0) {
        write global_out, y;
        if (y & 1) {
            write anon_port, 1;
        } else {
            write anon_port, 0;
        }
        y = y >> 1;
    }

    complex_lhs();
}
